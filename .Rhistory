install.packages(c("arules", "arulesViz", "cluster", "colorspace", "evaluate", "forecast", "h2o", "kernlab", "R6", "shiny"))
install.packages(c("acepack", "backports", "curl", "earth", "openssl", "plotmo", "proto", "quantmod", "RcppArmadillo", "reshape2"))
data("airquality")
edit(airquality)
install.packages(“Rserve”)
library(Rserve)
Rserve()
install.packages("Rserve")
library(Rserve)
Rserve()
install.packages(c("caret", "colorspace", "ggplot2", "htmlwidgets", "knitr", "plotly", "plotmo", "scales", "SparseM", "XML", "yaml"))
install.packages('dynamicTreeCut')
install.packages(c("HistData", "rgdal", "tseries", "zoo"))
library(MASS)
for(i in 1:500){
x<-mvrnorm(n=30,mu=c(0,0),Sigma=matrix(c(1,0.5,0.5,1),2,2))
meany<-mean(x[,2])
p<-x[,1]-mean(x[,1])
q<-x[,2]-mean(x[,2])
b<-sum(p*q)/sum(p^2)
result1[i]<-meany
result2[i]<-meany + b*(-mean(x[,1]))
}
for(i in 1:500){
x<-mvrnorm(n=30,mu=c(0,0),Sigma=matrix(c(1,0.5,0.5,1),2,2))
meany<-mean(x[,2])
p<-x[,1]-mean(x[,1])
q<-x[,2]-mean(x[,2])
b<-sum(p*q)/sum(p^2)
}
for(i in 1:500){
x<-mvrnorm(n=30,mu=c(0,0),Sigma=matrix(c(1,0.5,0.5,1),2,2))
meany<-mean(x[,2])
p<-x[,1]-mean(x[,1])
q<-x[,2]-mean(x[,2])
b<-sum(p*q)/sum(p^2)
#result1[i]<-meany
#result2[i]<-meany + b*(-mean(x[,1]))
}
x
result1<-[]
result2<-[]
for(i in 1:500){
x<-mvrnorm(n=30,mu=c(0,0),Sigma=matrix(c(1,0.5,0.5,1),2,2))
meany<-mean(x[,2])
p<-x[,1]-mean(x[,1])
q<-x[,2]-mean(x[,2])
b<-sum(p*q)/sum(p^2)
result1[i]<-meany
result2[i]<-meany + b*(-mean(x[,1]))
}
result1[]<-NULL
result2[]<-NULL
for(i in 1:500){
x<-mvrnorm(n=30,mu=c(0,0),Sigma=matrix(c(1,0.5,0.5,1),2,2))
meany<-mean(x[,2])
p<-x[,1]-mean(x[,1])
q<-x[,2]-mean(x[,2])
b<-sum(p*q)/sum(p^2)
result1[i]<-meany
result2[i]<-meany + b*(-mean(x[,1]))
}
x[,2]
meany
for(i in 1:500){
x<-mvrnorm(n=30,mu=c(0,0),Sigma=matrix(c(1,0.5,0.5,1),2,2))
meany<-mean(x[,2])
p<-x[,1]-mean(x[,1])
q<-x[,2]-mean(x[,2])
b<-sum(p*q)/sum(p^2)
result1[i]<-meany
result2[i]<-meany + b*(-mean(x[,1]))
}
result1[]<-NULL
for(i in 1:500){
x<-mvrnorm(n=30,mu=c(0,0),Sigma=matrix(c(1,0.5,0.5,1),2,2))
meany<-mean(x[,2])
p<-x[,1]-mean(x[,1])
q<-x[,2]-mean(x[,2])
b<-sum(p*q)/sum(p^2)
print(meany)
print(meany + b*(-mean(x[,1])))
#result1[i]<-meany
#result2[i]<-meany + b*(-mean(x[,1]))
}
result1[]<-NULL
result2[]<-NULL
for(i in 1:500){
x<-mvrnorm(n=30,mu=c(0,0),Sigma=matrix(c(1,0.5,0.5,1),2,2))
meany<-mean(x[,2])
p<-x[,1]-mean(x[,1])
q<-x[,2]-mean(x[,2])
b<-sum(p*q)/sum(p^2)
result1[i]<-meany
result2[i]<-meany + b*(-mean(x[,1]))
}
result1<-NULL
result2<-NULL
for(i in 1:500){
x<-mvrnorm(n=30,mu=c(0,0),Sigma=matrix(c(1,0.5,0.5,1),2,2))
meany<-mean(x[,2])
p<-x[,1]-mean(x[,1])
q<-x[,2]-mean(x[,2])
b<-sum(p*q)/sum(p^2)
result1[i]<-meany
result2[i]<-meany + b*(-mean(x[,1]))
}
result1
result2
hist(result1)
hist(result2)
library(MASS)
result1<-NULL
result2<-NULL
for(i in 1:500){
x<-mvrnorm(n=30,mu=c(0,0),Sigma=matrix(c(1,0.5,0.5,1),2,2))
meany<-mean(x[,2])
p<-x[,1]-mean(x[,1])
q<-x[,2]-mean(x[,2])
b<-sum(p*q)/sum(p^2)
result1[i]<-meany
result2[i]<-meany + b*(-mean(x[,1]))
}
result1
result2
hist(result1)
hist(result2)
library(twitteR)
user <- getUser('kuanhoong')
library(ROAuth)
setup_twitter_oauth(consumer_key,consumer_secret,access_token,access_secret)
setup_twitter_oauth(consumer_key=consumer_key,consumer_secret=consumer_secret,access_token=access_token,access_secret=access_secret)
setup_twitter_oauth(consumer_key='9vvwdmZHLfv3g5dh6GV79miZK',consumer_secret='Z106DRB05ungt6OTy2Vxskk6VxKhXYaazmBmbHu5GyAMCAJKOv',access_token='2790531-4jGsPZzUFOJ8rwDURALu4MSGsu9IZpy0zWtvdfYIbc',access_secret='FE7mNVQOd8ktXBEqinwEwixkALBJAMvoXyar9UnVWymf3')
user <- getUser('kuanhoong')
user$toDataFrame()
friends <- user$getFriends() # who this user follows
followers <- user$getFollowers() # this user's followers
followers2 <- followers[[1]]$getFollowers() # a follower's followers
user <- getUser('kuanhoong')
friends <- user$getFriends() # who this user follows
followers <- user$getFollowers() # this user's followers
followers2 <- followers[[1]]$getFollowers() # a follower's followers
install.packages("leaflet")
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=3.158431, lat=101.711599, popup="Petronas Twin Tower")
m  # Print the map
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=101.711599, lat=3.158431, popup="Petronas Twin Tower")
m  # Print the map
###########################################
# Churn Analytics using R                 #
# Poo Kuan Hoong                          #
# Malaysia R User Group Meetup            #
# http://www.github.com/kuanhoong/churn-r #
###########################################
setwd('C:/Users/Kuan/Documents/github/churn-r')
library(caret)
library(ggplot2)
library(data.table)
library(car)
library(corrplot)
library(rattle)
library(randomForest)
library(C50)
library(rpart)
library(ROCR)
library(e1071)
library(gmodels)
#load the data
library(data.table)
cust_data<-fread('telco.csv', header=TRUE, sep=",")
#########################
# Data Proprocessing    #
#########################
# Remove Unwanted Variables
cust_data <- cust_data[,-1]
# Handling Missing Values: Replace NAs as 0
cust_data[is.na(cust_data)] <- 0
# Recode Variables: Replace Churn status, Yes = 1, No = 1
cust_data$Churn <-replace(cust_data$Churn,cust_data$Churn == "No",0)
cust_data$Churn <-replace(cust_data$Churn,cust_data$Churn == "Yes",1)
cust_data$Churn<-as.numeric(cust_data$Churn)
#convert column to factor
cust_data[,'Churn'] <- lapply(cust_data[,'Churn'] , factor)
# overview of customer data
View(cust_data)
summary(cust_data)
str(cust_data)
# Correlation Matrix
corrmatrix <- round(cor(cust_data[,-'Churn']), digits = 2)
corrmatrix
# Recode Variables: Recode using the library(car) package
cust_data$gender<-recode(cust_data$gender, "'Male'=1; 'Female'=0")
cust_data$Partner<-recode(cust_data$Partner, "'Yes'=1; 'No'=0")
cust_data$Dependents<-recode(cust_data$Dependents, "'Yes'=1; 'No'=0")
cust_data$PhoneService <- recode(cust_data$PhoneService, "'Yes'=1; 'No'=0")
cust_data$MultipleLines <- recode(cust_data$MultipleLines, "'Yes'=1; 'No'=0;'No phone service'=3")
cust_data$InternetService <- recode(cust_data$InternetService, "'No'=0; 'DSL'=1;'Fiber optic'=2")
cust_data$OnlineSecurity <- recode(cust_data$OnlineSecurity, "'No'=0; 'Yes'=1;'No internet service'=2")
cust_data$OnlineBackup <- recode(cust_data$OnlineBackup, "'No'=0; 'Yes'=1;'No internet service'=2")
cust_data$DeviceProtection <- recode(cust_data$DeviceProtection, "'No'=0; 'Yes'=1;'No internet service'=2")
cust_data$TechSupport <- recode(cust_data$TechSupport, "'No'=0; 'Yes'=1;'No internet service'=2")
cust_data$StreamingTV <- recode(cust_data$StreamingTV, "'No'=0; 'Yes'=1;'No internet service'=2")
cust_data$StreamingMovies <- recode(cust_data$StreamingMovies, "'No'=0; 'Yes'=1;'No internet service'=2")
cust_data$Contract <- recode(cust_data$Contract, "'Month-to-month'=0; 'One year'=1;'Two year'=2")
cust_data$PaperlessBilling<- recode(cust_data$PaperlessBilling, "'Yes'=1; 'No'=0")
cust_data$PaymentMethod <- recode(cust_data$PaymentMethod, "'Electronic check'=1; 'Mailed check'=2;'Bank transfer (automatic)'=3; 'Credit card (automatic)'=4")
#convert column to factor
cust_data[,'Churn'] <- lapply(cust_data[,'Churn'] , factor)
###########################################
# Churn Analytics using R                 #
# Poo Kuan Hoong                          #
# Malaysia R User Group Meetup            #
# http://www.github.com/kuanhoong/churn-r #
###########################################
setwd('C:/Users/Kuan/Documents/github/churn-r')
library(caret)
library(ggplot2)
library(data.table)
library(car)
library(corrplot)
library(rattle)
library(randomForest)
library(C50)
library(rpart)
library(ROCR)
library(e1071)
library(gmodels)
#load the data
library(data.table)
cust_data<-fread('telco.csv', header=TRUE, sep=",")
#########################
# Data Proprocessing    #
#########################
# Remove Unwanted Variables
cust_data <- cust_data[,-1]
# Handling Missing Values: Replace NAs as 0
cust_data[is.na(cust_data)] <- 0
# Recode Variables: Replace Churn status, Yes = 1, No = 1
cust_data$Churn <-replace(cust_data$Churn,cust_data$Churn == "No",0)
cust_data$Churn <-replace(cust_data$Churn,cust_data$Churn == "Yes",1)
cust_data$Churn<-as.numeric(cust_data$Churn)
# Recode Variables: Recode using the library(car) package
cust_data$gender<-recode(cust_data$gender, "'Male'=1; 'Female'=0")
cust_data$Partner<-recode(cust_data$Partner, "'Yes'=1; 'No'=0")
cust_data$Dependents<-recode(cust_data$Dependents, "'Yes'=1; 'No'=0")
cust_data$PhoneService <- recode(cust_data$PhoneService, "'Yes'=1; 'No'=0")
cust_data$MultipleLines <- recode(cust_data$MultipleLines, "'Yes'=1; 'No'=0;'No phone service'=3")
cust_data$InternetService <- recode(cust_data$InternetService, "'No'=0; 'DSL'=1;'Fiber optic'=2")
cust_data$OnlineSecurity <- recode(cust_data$OnlineSecurity, "'No'=0; 'Yes'=1;'No internet service'=2")
cust_data$OnlineBackup <- recode(cust_data$OnlineBackup, "'No'=0; 'Yes'=1;'No internet service'=2")
cust_data$DeviceProtection <- recode(cust_data$DeviceProtection, "'No'=0; 'Yes'=1;'No internet service'=2")
cust_data$TechSupport <- recode(cust_data$TechSupport, "'No'=0; 'Yes'=1;'No internet service'=2")
cust_data$StreamingTV <- recode(cust_data$StreamingTV, "'No'=0; 'Yes'=1;'No internet service'=2")
cust_data$StreamingMovies <- recode(cust_data$StreamingMovies, "'No'=0; 'Yes'=1;'No internet service'=2")
cust_data$Contract <- recode(cust_data$Contract, "'Month-to-month'=0; 'One year'=1;'Two year'=2")
cust_data$PaperlessBilling<- recode(cust_data$PaperlessBilling, "'Yes'=1; 'No'=0")
cust_data$PaymentMethod <- recode(cust_data$PaymentMethod, "'Electronic check'=1; 'Mailed check'=2;'Bank transfer (automatic)'=3; 'Credit card (automatic)'=4")
#convert column to factor
cust_data[,'Churn'] <- lapply(cust_data[,'Churn'] , factor)
#################################
# Data Exploratory              #
#################################
# overview of customer data
View(cust_data)
summary(cust_data)
str(cust_data)
# Correlation Matrix
corrmatrix <- round(cor(cust_data[,-'Churn']), digits = 2)
corrmatrix
# heatmap of correlation matrix using ggplot2
png('correlation_matrix.png')
qplot(x=Var1, y=Var2, data=melt(cor(cust_data[,-'Churn'], use="p")), fill=value, geom="tile") +  scale_fill_gradient2(limits=c(-1, 1))+labs(title = "Correlation Matrix")
dev.off()
library(caret)
set.seed(1234)
intrain<-createDataPartition(y=cust_data$Churn,p=0.8,list=FALSE, times = 1)
training<-cust_data[intrain,]
testing<-cust_data[-intrain,]
fullMod = glm(Churn ~ ., data= training, family= binomial)
summary(fullMod)
intMod <- glm(Churn ~ 1, data= training, family= binomial)
summary(intMod)
fwdSelection = step(intMod, scope=list(lower=formula(intMod),upper=formula(fullMod)), direction="forward")
formula(fwdSelection)
summary(fwdSelection)
logic_reg <- glm(Churn ~ Contract + InternetService + tenure + PaperlessBilling+TotalCharges + MultipleLines + PaymentMethod +SeniorCitizen + StreamingTV + OnlineSecurity + TechSupport + StreamingMovies + MonthlyCharges + PhoneService + Dependents, data=training, family=binomial)
summary(logic_reg)
svm <- tune.svm(Churn ~ ., data = training, seq(0.5, 0.9, by = 0.1), cost = seq(100,1000, by = 100), kernel="radial", tunecontrol=tune.control(cross=10))
print(svm)
summary (svm)
svm$performances
svmfit <- svm$best.model
library(randomForest)
set.seed(1234)
rf <- randomForest(Churn ~ ., data=training, ntree=1000,importance=T)
print(rf)
importance(rf)
plot.new()
png('Mean_Decrease_Accuracy.png')
varImpPlot(rf, type=1, pch=19, col=1, cex=1.0, main="Mean Decrease Accuracy Plot")
abline(v=35, col="blue")
dev.off()
plot.new()
png('Mean_Decrease_Gini.png')
varImpPlot(rf, type=2, pch=19, col=1, cex=1.0, main="Mean Decrease Gini Plot")
dev.off()
library(C50)
# run C5.0 model to derive decision rules to obtain insights
c50model <- C5.0(Churn~., data=training, rules = TRUE)
c50model
#display the summary for C50
summary(c50model)
C5imp(c50model, metric = 'usage')
C5imp(c50model, metric = 'splits')
glmpred <- predict(logic_reg, testing[,-20], type = 'response')
svmpred <- predict(svmfit, testing[,-20], type='response')
rfpred <- predict(rf, testing[,-20], type='response')
predict <- function(t) ifelse ( glmpred> t, 1.0)
predict2 <- function(t) ifelse ( svmpred> t, 1.0)
predict3 <- function(t) ifelse ( rfpred> t, 1.0)
CrossTable(testing$Churn, predict(0.5), prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE, dnn = c('actual default', 'predicted default'))
CrossTable(testing$Churn, glmpred>0.5, prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE, dnn = c('actual default', 'predicted default'))
CrossTable(testing$Churn, svmpred, prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE, dnn = c('actual default', 'predicted default'))
CrossTable(testing$Churn, rfpred, prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE, dnn = c('actual default', 'predicted default'))
svmpred<-as.numeric(levels(svmpred))[svmpred]
rfpred<-as.numeric(levels(rfpred))[rfpred]
glmpred <- prediction(glmpred, testing$Churn)
glmperf <- performance(glmpred, 'tpr','fpr')
svmpred <- prediction(svmpred, testing$Churn)
svmperf <- performance(svmpred, 'tpr','fpr')
rfpred <- prediction(rfpred, testing$Churn)
rfperf <- performance(rfpred, 'tpr','fpr')
plot.new()
png('ROC_curve.png')
plot(glmperf, col='green', lwd=2.5)
plot(svmperf, add=TRUE, col='orange', lwd=2.5)
plot(rfperf, add=TRUE, col='blue', lwd=2.5)
abline(a=0, b= 1, col='red', lwd=2.5, lty=2)
title('ROC Curve')
legend("bottomright", c("Logistic","SVM","RF"), lty=c(1,1,1), lwd=c(1.4,1.4,1.4), col=c('green','orange','blue'))
dev.off()
# AUC (area under the curve) Calculation Matrix
glm.perf <- performance(glmpred, measure = 'auc')
glm.perf <- glm.perf@y.values[[1]]
print(glm.perf)
svm.perf <- performance(svmpred, measure = 'auc')
svm.perf <- svm.perf@y.values[[1]]
print(svm.perf)
rf.perf <- performance(rfpred, measure = 'auc')
rf.perf <- rf.perf@y.values[[1]]
print(rf.perf)
########################################
# Save the model to file               #
########################################
save(logic_reg, file='churnmodel.rda')
########################################
# Session Info                         #
########################################
sessionInfo()
